// <auto-generated />
using System;
using Group1_5_FagelGamous.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Group1_5_FagelGamous.Migrations
{
    [DbContext(typeof(MummyContext))]
    partial class MummyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("excelimporter$template_nr_mxseq");

            modelBuilder.HasSequence("system$filedocument_fileid_mxseq");

            modelBuilder.HasSequence("system$queuedtask_sequence_mxseq");

            modelBuilder.Entity("Group1_5_FagelGamous.Data.Entities.Analysis", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<int?>("Analysisid")
                        .HasColumnType("integer")
                        .HasColumnName("analysisid");

                    b.Property<int?>("Analysistype")
                        .HasColumnType("integer")
                        .HasColumnName("analysistype");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<string>("Doneby")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("doneby");

                    b.HasKey("Id");

                    b.ToTable("analysis", (string)null);
                });

            modelBuilder.Entity("Group1_5_FagelGamous.Data.Entities.AnalysisTextile", b =>
                {
                    b.Property<long>("MainAnalysisid")
                        .HasColumnType("bigint")
                        .HasColumnName("main$analysisid");

                    b.Property<long>("MainTextileid")
                        .HasColumnType("bigint")
                        .HasColumnName("main$textileid");

                    b.Property<long?>("AnalysisId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TextilesId")
                        .HasColumnType("bigint");

                    b.HasKey("MainAnalysisid", "MainTextileid")
                        .HasName("main$analysis_textile_pkey");

                    b.HasIndex("AnalysisId");

                    b.HasIndex("TextilesId");

                    b.HasIndex(new[] { "MainTextileid", "MainAnalysisid" }, "idx_main$analysis_textile_main$textile_main$analysis");

                    b.ToTable("analysis_textile", (string)null);
                });

            modelBuilder.Entity("Group1_5_FagelGamous.Data.Entities.Bodyanalysischart", b =>
                {
                    b.Property<string>("Area")
                        .HasColumnType("character varying")
                        .HasColumnName("area");

                    b.Property<string>("Burialid")
                        .HasColumnType("character varying")
                        .HasColumnName("burialid");

                    b.Property<string>("Burialnumber")
                        .HasColumnType("character varying")
                        .HasColumnName("burialnumber");

                    b.Property<string>("CariesPeriodontalDisease")
                        .HasColumnType("character varying")
                        .HasColumnName("caries_periodontal_disease");

                    b.Property<DateOnly?>("Dateofexamination")
                        .HasColumnType("date")
                        .HasColumnName("dateofexamination");

                    b.Property<string>("Dorsalpitting")
                        .HasColumnType("character varying")
                        .HasColumnName("dorsalpitting");

                    b.Property<string>("Eastwest")
                        .HasColumnType("character varying")
                        .HasColumnName("eastwest");

                    b.Property<double?>("Estimatestature")
                        .HasColumnType("double precision")
                        .HasColumnName("estimatestature");

                    b.Property<double?>("Femidurlength")
                        .HasColumnType("double precision")
                        .HasColumnName("femidurlength");

                    b.Property<string>("Femur")
                        .HasColumnType("character varying")
                        .HasColumnName("femur");

                    b.Property<double?>("Femurheaddiameter")
                        .HasColumnType("double precision")
                        .HasColumnName("femurheaddiameter");

                    b.Property<string>("Gonion")
                        .HasColumnType("character varying")
                        .HasColumnName("gonion");

                    b.Property<string>("Haircolor")
                        .HasColumnType("character varying")
                        .HasColumnName("haircolor");

                    b.Property<string>("Humerus")
                        .HasColumnType("character varying")
                        .HasColumnName("humerus");

                    b.Property<double?>("Humerusheaddiameter")
                        .HasColumnType("double precision")
                        .HasColumnName("humerusheaddiameter");

                    b.Property<double?>("Humeruslength")
                        .HasColumnType("double precision")
                        .HasColumnName("humeruslength");

                    b.Property<long?>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Lamboidsuture")
                        .HasColumnType("character varying")
                        .HasColumnName("lamboidsuture");

                    b.Property<string>("MedialIpRamus")
                        .HasColumnType("character varying")
                        .HasColumnName("medial_ip_ramus");

                    b.Property<string>("Northsouth")
                        .HasColumnType("character varying")
                        .HasColumnName("northsouth");

                    b.Property<string>("Notes")
                        .HasColumnType("character varying")
                        .HasColumnName("notes");

                    b.Property<string>("Nuchalcrest")
                        .HasColumnType("character varying")
                        .HasColumnName("nuchalcrest");

                    b.Property<string>("Observations")
                        .HasColumnType("character varying")
                        .HasColumnName("observations");

                    b.Property<string>("Orbitedge")
                        .HasColumnType("character varying")
                        .HasColumnName("orbitedge");

                    b.Property<string>("Osteophytosis")
                        .HasColumnType("character varying")
                        .HasColumnName("osteophytosis");

                    b.Property<string>("Parietalbossing")
                        .HasColumnType("character varying")
                        .HasColumnName("parietalbossing");

                    b.Property<string>("Preauricularsulcus")
                        .HasColumnType("character varying")
                        .HasColumnName("preauricularsulcus");

                    b.Property<double?>("Preservationindex")
                        .HasColumnType("double precision")
                        .HasColumnName("preservationindex");

                    b.Property<string>("Pubicbone")
                        .HasColumnType("character varying")
                        .HasColumnName("pubicbone");

                    b.Property<string>("Robust")
                        .HasColumnType("character varying")
                        .HasColumnName("robust");

                    b.Property<string>("Sciaticnotch")
                        .HasColumnType("character varying")
                        .HasColumnName("sciaticnotch");

                    b.Property<string>("Sphenooccipitalsynchrondrosis")
                        .HasColumnType("character varying")
                        .HasColumnName("sphenooccipitalsynchrondrosis");

                    b.Property<string>("Squamossuture")
                        .HasColumnType("character varying")
                        .HasColumnName("squamossuture");

                    b.Property<string>("Squareeastwest")
                        .HasColumnType("character varying")
                        .HasColumnName("squareeastwest");

                    b.Property<string>("Squarenorthsouth")
                        .HasColumnType("character varying")
                        .HasColumnName("squarenorthsouth");

                    b.Property<string>("Subpubicangle")
                        .HasColumnType("character varying")
                        .HasColumnName("subpubicangle");

                    b.Property<string>("Supraorbitalridges")
                        .HasColumnType("character varying")
                        .HasColumnName("supraorbitalridges");

                    b.Property<double?>("Tibia")
                        .HasColumnType("double precision")
                        .HasColumnName("tibia");

                    b.Property<string>("Toothattrition")
                        .HasColumnType("character varying")
                        .HasColumnName("toothattrition");

                    b.Property<string>("Tootheruption")
                        .HasColumnType("character varying")
                        .HasColumnName("tootheruption");

                    b.Property<string>("Tootheruptionageestimate")
                        .HasColumnType("character varying")
                        .HasColumnName("tootheruptionageestimate");

                    b.Property<string>("Ventralarc")
                        .HasColumnType("character varying")
                        .HasColumnName("ventralarc");

                    b.Property<string>("Zygomaticcrest")
                        .HasColumnType("character varying")
                        .HasColumnName("zygomaticcrest");

                    b.ToTable("bodyanalysischart", (string)null);
                });

            modelBuilder.Entity("Group1_5_FagelGamous.Data.Entities.Burialmain", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Adultsubadult")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("adultsubadult");

                    b.Property<string>("Ageatdeath")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("ageatdeath");

                    b.Property<string>("Area")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("area");

                    b.Property<string>("Burialid")
                        .HasColumnType("text")
                        .HasColumnName("burialid");

                    b.Property<string>("Burialmaterials")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("burialmaterials");

                    b.Property<string>("Burialnumber")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("burialnumber");

                    b.Property<string>("Clusternumber")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("clusternumber");

                    b.Property<string>("Dataexpertinitials")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("dataexpertinitials");

                    b.Property<DateTime?>("Dateofexcavation")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dateofexcavation");

                    b.Property<string>("Depth")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("depth");

                    b.Property<string>("Eastwest")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("eastwest");

                    b.Property<string>("Excavationrecorder")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("excavationrecorder");

                    b.Property<string>("Facebundles")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("facebundles");

                    b.Property<string>("Fieldbookexcavationyear")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("fieldbookexcavationyear");

                    b.Property<string>("Fieldbookpage")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("fieldbookpage");

                    b.Property<string>("Goods")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("goods");

                    b.Property<string>("Hair")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("hair");

                    b.Property<string>("Haircolor")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("haircolor");

                    b.Property<string>("Headdirection")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("headdirection");

                    b.Property<string>("Length")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("length");

                    b.Property<string>("Northsouth")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("northsouth");

                    b.Property<string>("Photos")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("photos");

                    b.Property<string>("Preservation")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("preservation");

                    b.Property<string>("Samplescollected")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("samplescollected");

                    b.Property<string>("Sex")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("sex");

                    b.Property<string>("Shaftnumber")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("shaftnumber");

                    b.Property<string>("Southtofeet")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("southtofeet");

                    b.Property<string>("Southtohead")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("southtohead");

                    b.Property<string>("Squareeastwest")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("squareeastwest");

                    b.Property<string>("Squarenorthsouth")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("squarenorthsouth");

                    b.Property<string>("Text")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("text");

                    b.Property<string>("Westtofeet")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("westtofeet");

                    b.Property<string>("Westtohead")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("westtohead");

                    b.Property<string>("Wrapping")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("wrapping");

                    b.HasKey("Id");

                    b.ToTable("burialmain", (string)null);
                });

            modelBuilder.Entity("Group1_5_FagelGamous.Data.Entities.BurialmainTextile", b =>
                {
                    b.Property<long>("MainBurialmainid")
                        .HasColumnType("bigint")
                        .HasColumnName("main$burialmainid");

                    b.Property<long>("MainTextileid")
                        .HasColumnType("bigint")
                        .HasColumnName("main$textileid");

                    b.Property<long?>("BurialMainId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TextilesId")
                        .HasColumnType("bigint");

                    b.HasKey("MainBurialmainid", "MainTextileid")
                        .HasName("main$burialmain_textile_pkey");

                    b.HasIndex("BurialMainId");

                    b.HasIndex("TextilesId");

                    b.HasIndex(new[] { "MainTextileid", "MainBurialmainid" }, "idx_main$burialmain_textile_main$textile_main$burialmain");

                    b.ToTable("burialmain_textile", (string)null);
                });

            modelBuilder.Entity("Group1_5_FagelGamous.Data.Entities.Color", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<int?>("Colorid")
                        .HasColumnType("integer")
                        .HasColumnName("colorid");

                    b.Property<string>("Value")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.ToTable("color", (string)null);
                });

            modelBuilder.Entity("Group1_5_FagelGamous.Data.Entities.ColorTextile", b =>
                {
                    b.Property<long>("MainColorid")
                        .HasColumnType("bigint")
                        .HasColumnName("main$colorid");

                    b.Property<long>("MainTextileid")
                        .HasColumnType("bigint")
                        .HasColumnName("main$textileid");

                    b.Property<long?>("ColorsId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TextilesId")
                        .HasColumnType("bigint");

                    b.HasKey("MainColorid", "MainTextileid")
                        .HasName("main$color_textile_pkey");

                    b.HasIndex("ColorsId");

                    b.HasIndex("TextilesId");

                    b.HasIndex(new[] { "MainTextileid", "MainColorid" }, "idx_main$color_textile_main$textile_main$color");

                    b.ToTable("color_textile", (string)null);
                });

            modelBuilder.Entity("Group1_5_FagelGamous.Data.Entities.Decoration", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<int?>("Decorationid")
                        .HasColumnType("integer")
                        .HasColumnName("decorationid");

                    b.Property<string>("Value")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.ToTable("decoration", (string)null);
                });

            modelBuilder.Entity("Group1_5_FagelGamous.Data.Entities.DecorationTextile", b =>
                {
                    b.Property<long>("MainDecorationid")
                        .HasColumnType("bigint")
                        .HasColumnName("main$decorationid");

                    b.Property<long>("MainTextileid")
                        .HasColumnType("bigint")
                        .HasColumnName("main$textileid");

                    b.Property<long?>("DecorationsId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TextilesId")
                        .HasColumnType("bigint");

                    b.HasKey("MainDecorationid", "MainTextileid")
                        .HasName("main$decoration_textile_pkey");

                    b.HasIndex("DecorationsId");

                    b.HasIndex("TextilesId");

                    b.HasIndex(new[] { "MainTextileid", "MainDecorationid" }, "idx_main$decoration_textile_main$textile_main$decoration");

                    b.ToTable("decoration_textile", (string)null);
                });

            modelBuilder.Entity("Group1_5_FagelGamous.Data.Entities.Dimension", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<int?>("Dimensionid")
                        .HasColumnType("integer")
                        .HasColumnName("dimensionid");

                    b.Property<string>("Dimensiontype")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("dimensiontype");

                    b.Property<string>("Value")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.ToTable("dimension", (string)null);
                });

            modelBuilder.Entity("Group1_5_FagelGamous.Data.Entities.DimensionTextile", b =>
                {
                    b.Property<long>("MainDimensionid")
                        .HasColumnType("bigint")
                        .HasColumnName("main$dimensionid");

                    b.Property<long>("MainTextileid")
                        .HasColumnType("bigint")
                        .HasColumnName("main$textileid");

                    b.Property<long?>("DimensionsId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TextilesId")
                        .HasColumnType("bigint");

                    b.HasKey("MainDimensionid", "MainTextileid")
                        .HasName("main$dimension_textile_pkey");

                    b.HasIndex("DimensionsId");

                    b.HasIndex("TextilesId");

                    b.HasIndex(new[] { "MainTextileid", "MainDimensionid" }, "idx_main$dimension_textile_main$textile_main$dimension");

                    b.ToTable("dimension_textile", (string)null);
                });

            modelBuilder.Entity("Group1_5_FagelGamous.Data.Entities.PhotodataTextile", b =>
                {
                    b.Property<long>("MainPhotodataid")
                        .HasColumnType("bigint")
                        .HasColumnName("main$photodataid");

                    b.Property<long>("MainTextileid")
                        .HasColumnType("bigint")
                        .HasColumnName("main$textileid");

                    b.Property<long?>("PhotoDataId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TextilesId")
                        .HasColumnType("bigint");

                    b.HasKey("MainPhotodataid", "MainTextileid")
                        .HasName("main$photodata_textile_pkey");

                    b.HasIndex("PhotoDataId");

                    b.HasIndex("TextilesId");

                    b.HasIndex(new[] { "MainTextileid", "MainPhotodataid" }, "idx_main$photodata_textile_main$textile_main$photodata");

                    b.ToTable("photodata_textile", (string)null);
                });

            modelBuilder.Entity("Group1_5_FagelGamous.Data.Entities.Photodatum", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Filename")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("filename");

                    b.Property<int?>("Photodataid")
                        .HasColumnType("integer")
                        .HasColumnName("photodataid");

                    b.Property<string>("Url")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.ToTable("photodata", (string)null);
                });

            modelBuilder.Entity("Group1_5_FagelGamous.Data.Entities.Photoform", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Area")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("area");

                    b.Property<string>("Burialnumber")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("burialnumber");

                    b.Property<string>("Eastwest")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("eastwest");

                    b.Property<string>("Filename")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("filename");

                    b.Property<string>("Northsouth")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("northsouth");

                    b.Property<DateTime?>("Photodate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("photodate");

                    b.Property<string>("Photographer")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("photographer");

                    b.Property<string>("Squareeastwest")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("squareeastwest");

                    b.Property<string>("Squarenorthsouth")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("squarenorthsouth");

                    b.Property<string>("Tableassociation")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tableassociation");

                    b.HasKey("Id");

                    b.ToTable("photoform", (string)null);
                });

            modelBuilder.Entity("Group1_5_FagelGamous.Data.Entities.Structure", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<int?>("Structureid")
                        .HasColumnType("integer")
                        .HasColumnName("structureid");

                    b.Property<string>("Value")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.ToTable("structure", (string)null);
                });

            modelBuilder.Entity("Group1_5_FagelGamous.Data.Entities.StructureTextile", b =>
                {
                    b.Property<long>("MainStructureid")
                        .HasColumnType("bigint")
                        .HasColumnName("main$structureid");

                    b.Property<long>("MainTextileid")
                        .HasColumnType("bigint")
                        .HasColumnName("main$textileid");

                    b.Property<long?>("StructuresId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TextilesId")
                        .HasColumnType("bigint");

                    b.HasKey("MainStructureid", "MainTextileid")
                        .HasName("main$structure_textile_pkey");

                    b.HasIndex("StructuresId");

                    b.HasIndex("TextilesId");

                    b.HasIndex(new[] { "MainTextileid", "MainStructureid" }, "idx_main$structure_textile_main$textile_main$structure");

                    b.ToTable("structure_textile", (string)null);
                });

            modelBuilder.Entity("Group1_5_FagelGamous.Data.Entities.Teammember", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Bio")
                        .HasColumnType("character varying")
                        .HasColumnName("bio");

                    b.Property<string>("Membername")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("membername");

                    b.HasKey("Id");

                    b.ToTable("teammember", (string)null);
                });

            modelBuilder.Entity("Group1_5_FagelGamous.Data.Entities.Textile", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Burialnumber")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("burialnumber");

                    b.Property<string>("Description")
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<string>("Direction")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("direction");

                    b.Property<string>("Estimatedperiod")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("estimatedperiod");

                    b.Property<string>("Locale")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("locale");

                    b.Property<DateTime?>("Photographeddate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("photographeddate");

                    b.Property<DateTime?>("Sampledate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("sampledate");

                    b.Property<int?>("Textileid")
                        .HasColumnType("integer")
                        .HasColumnName("textileid");

                    b.HasKey("Id");

                    b.ToTable("textile", (string)null);
                });

            modelBuilder.Entity("Group1_5_FagelGamous.Data.Entities.Textilefunction", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<int?>("Textilefunctionid")
                        .HasColumnType("integer")
                        .HasColumnName("textilefunctionid");

                    b.Property<string>("Value")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.ToTable("textilefunction", (string)null);
                });

            modelBuilder.Entity("Group1_5_FagelGamous.Data.Entities.TextilefunctionTextile", b =>
                {
                    b.Property<long>("MainTextilefunctionid")
                        .HasColumnType("bigint")
                        .HasColumnName("main$textilefunctionid");

                    b.Property<long>("MainTextileid")
                        .HasColumnType("bigint")
                        .HasColumnName("main$textileid");

                    b.Property<long?>("TextileFunctionsId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TextilesId")
                        .HasColumnType("bigint");

                    b.HasKey("MainTextilefunctionid", "MainTextileid")
                        .HasName("main$textilefunction_textile_pkey");

                    b.HasIndex("TextileFunctionsId");

                    b.HasIndex("TextilesId");

                    b.HasIndex(new[] { "MainTextileid", "MainTextilefunctionid" }, "idx_main$textilefunction_textile");

                    b.ToTable("textilefunction_textile", (string)null);
                });

            modelBuilder.Entity("Group1_5_FagelGamous.Data.Entities.Yarnmanipulation", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Angle")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("angle");

                    b.Property<string>("Component")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("component");

                    b.Property<string>("Count")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("count");

                    b.Property<string>("Direction")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("direction");

                    b.Property<string>("Manipulation")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("manipulation");

                    b.Property<string>("Material")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("material");

                    b.Property<string>("Ply")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("ply");

                    b.Property<string>("Thickness")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("thickness");

                    b.Property<int?>("Yarnmanipulationid")
                        .HasColumnType("integer")
                        .HasColumnName("yarnmanipulationid");

                    b.HasKey("Id");

                    b.ToTable("yarnmanipulation", (string)null);
                });

            modelBuilder.Entity("Group1_5_FagelGamous.Data.Entities.YarnmanipulationTextile", b =>
                {
                    b.Property<long>("MainYarnmanipulationid")
                        .HasColumnType("bigint")
                        .HasColumnName("main$yarnmanipulationid");

                    b.Property<long>("MainTextileid")
                        .HasColumnType("bigint")
                        .HasColumnName("main$textileid");

                    b.Property<long?>("TextilesId")
                        .HasColumnType("bigint");

                    b.Property<long?>("YarnmanipulationsId")
                        .HasColumnType("bigint");

                    b.HasKey("MainYarnmanipulationid", "MainTextileid")
                        .HasName("main$yarnmanipulation_textile_pkey");

                    b.HasIndex("TextilesId");

                    b.HasIndex("YarnmanipulationsId");

                    b.HasIndex(new[] { "MainTextileid", "MainYarnmanipulationid" }, "idx_main$yarnmanipulation_textile");

                    b.ToTable("yarnmanipulation_textile", (string)null);
                });

            modelBuilder.Entity("Group1_5_FagelGamous.Data.Entities.AnalysisTextile", b =>
                {
                    b.HasOne("Group1_5_FagelGamous.Data.Entities.Analysis", "Analysis")
                        .WithMany()
                        .HasForeignKey("AnalysisId");

                    b.HasOne("Group1_5_FagelGamous.Data.Entities.Textile", "Textiles")
                        .WithMany()
                        .HasForeignKey("TextilesId");

                    b.Navigation("Analysis");

                    b.Navigation("Textiles");
                });

            modelBuilder.Entity("Group1_5_FagelGamous.Data.Entities.BurialmainTextile", b =>
                {
                    b.HasOne("Group1_5_FagelGamous.Data.Entities.Burialmain", "BurialMain")
                        .WithMany()
                        .HasForeignKey("BurialMainId");

                    b.HasOne("Group1_5_FagelGamous.Data.Entities.Textile", "Textiles")
                        .WithMany()
                        .HasForeignKey("TextilesId");

                    b.Navigation("BurialMain");

                    b.Navigation("Textiles");
                });

            modelBuilder.Entity("Group1_5_FagelGamous.Data.Entities.ColorTextile", b =>
                {
                    b.HasOne("Group1_5_FagelGamous.Data.Entities.Color", "Colors")
                        .WithMany()
                        .HasForeignKey("ColorsId");

                    b.HasOne("Group1_5_FagelGamous.Data.Entities.Textile", "Textiles")
                        .WithMany()
                        .HasForeignKey("TextilesId");

                    b.Navigation("Colors");

                    b.Navigation("Textiles");
                });

            modelBuilder.Entity("Group1_5_FagelGamous.Data.Entities.DecorationTextile", b =>
                {
                    b.HasOne("Group1_5_FagelGamous.Data.Entities.Decoration", "Decorations")
                        .WithMany()
                        .HasForeignKey("DecorationsId");

                    b.HasOne("Group1_5_FagelGamous.Data.Entities.Textile", "Textiles")
                        .WithMany()
                        .HasForeignKey("TextilesId");

                    b.Navigation("Decorations");

                    b.Navigation("Textiles");
                });

            modelBuilder.Entity("Group1_5_FagelGamous.Data.Entities.DimensionTextile", b =>
                {
                    b.HasOne("Group1_5_FagelGamous.Data.Entities.Dimension", "Dimensions")
                        .WithMany()
                        .HasForeignKey("DimensionsId");

                    b.HasOne("Group1_5_FagelGamous.Data.Entities.Textile", "Textiles")
                        .WithMany()
                        .HasForeignKey("TextilesId");

                    b.Navigation("Dimensions");

                    b.Navigation("Textiles");
                });

            modelBuilder.Entity("Group1_5_FagelGamous.Data.Entities.PhotodataTextile", b =>
                {
                    b.HasOne("Group1_5_FagelGamous.Data.Entities.Photodatum", "PhotoData")
                        .WithMany()
                        .HasForeignKey("PhotoDataId");

                    b.HasOne("Group1_5_FagelGamous.Data.Entities.Textile", "Textiles")
                        .WithMany()
                        .HasForeignKey("TextilesId");

                    b.Navigation("PhotoData");

                    b.Navigation("Textiles");
                });

            modelBuilder.Entity("Group1_5_FagelGamous.Data.Entities.StructureTextile", b =>
                {
                    b.HasOne("Group1_5_FagelGamous.Data.Entities.Structure", "Structures")
                        .WithMany()
                        .HasForeignKey("StructuresId");

                    b.HasOne("Group1_5_FagelGamous.Data.Entities.Textile", "Textiles")
                        .WithMany()
                        .HasForeignKey("TextilesId");

                    b.Navigation("Structures");

                    b.Navigation("Textiles");
                });

            modelBuilder.Entity("Group1_5_FagelGamous.Data.Entities.TextilefunctionTextile", b =>
                {
                    b.HasOne("Group1_5_FagelGamous.Data.Entities.Textilefunction", "TextileFunctions")
                        .WithMany()
                        .HasForeignKey("TextileFunctionsId");

                    b.HasOne("Group1_5_FagelGamous.Data.Entities.Textile", "Textiles")
                        .WithMany()
                        .HasForeignKey("TextilesId");

                    b.Navigation("TextileFunctions");

                    b.Navigation("Textiles");
                });

            modelBuilder.Entity("Group1_5_FagelGamous.Data.Entities.YarnmanipulationTextile", b =>
                {
                    b.HasOne("Group1_5_FagelGamous.Data.Entities.Textile", "Textiles")
                        .WithMany()
                        .HasForeignKey("TextilesId");

                    b.HasOne("Group1_5_FagelGamous.Data.Entities.Yarnmanipulation", "Yarnmanipulations")
                        .WithMany()
                        .HasForeignKey("YarnmanipulationsId");

                    b.Navigation("Textiles");

                    b.Navigation("Yarnmanipulations");
                });
#pragma warning restore 612, 618
        }
    }
}
